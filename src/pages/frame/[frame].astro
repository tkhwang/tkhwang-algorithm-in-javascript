---
import { getCollection, render } from 'astro:content'
import Seo from '@components/seo.astro'
import Layout from '@layouts/layout.astro'
import Prose from '@components/prose.astro'
import { SITE } from '@constants'
import { defaultDateFormat, isoDateFormat, sortDesc } from '@utils'
import SkipNavContent from '@components/a11y/skip-nav-content.astro'
import Spacer from '@components/spacer.astro'
import Aside from '@components/aside.astro'
import TagLinks from '@components/tag-links.astro'
import Playground from '@components/playground.astro'
import Giscus from '@components/giscus.astro'

export async function getStaticPaths() {
	const entries = sortDesc(await getCollection('frame'))

	return entries.map((entry) => ({
		params: {
			frame: entry.data.slug,
		},
		props: {
			entry,
		},
	}))
}

const { entry } = Astro.props
const { data: frame } = entry
const { Content } = await render(entry)
---

<Layout>
	<Seo slot="seo" forceTitle={frame.title} description={frame.description} image={frame.image}>
		<meta name="twitter:label1" value="Author" />
		<meta name="twitter:data1" data-pagefind-meta="author" value={SITE.defaultAuthor} />
		<meta name="twitter:label2" value="Tags" />
		<meta name="twitter:data2" value={frame.tags.join(', ')} />
		<meta name="article:published_time" data-pagefind-meta="published_time" content={isoDateFormat(frame.date)} />
		<meta name="article:modified_time" data-pagefind-meta="modified_time" content={isoDateFormat(frame.lastUpdated)} />
	</Seo>
	<SkipNavContent searchIndex={frame.searchIndex}>
		<Prose>
			<div class="uppercase tracking-wide text-xs font-semibold text-highlight">Frame</div>
			<Spacer axis="vertical" size={3} />
			<h1 class="mb-0! text-xl md:text-2xl text-highlight" data-pagefind-meta="title">{frame.title}</h1>
			<Spacer axis="vertical" size={4} />
			{
				frame.description ? (
					<>
						<p class="text-faded">{frame.description}</p>
						<Spacer axis="vertical" size={4} />
					</>
				) : null
			}
			<div class="text-faded">
				{defaultDateFormat(frame.date)}
				{
					frame.tags.length ? (
						<>
							{' â€” '}
							<TagLinks tags={frame.tags} />
						</>
					) : null
				}
			</div>
			<Spacer axis="vertical" size={12} />
			<Content components={{ Aside, Playground }} />
			<Spacer axis="vertical" size={16} />
			<Giscus />
		</Prose>
	</SkipNavContent>
</Layout>
